"--Load up Pathogen
""" call pathogen#runtime_append_all_bundles()
""" call pathogen#helptags()

" Plug exec
""" call plug#begin()
"""   Plug '~/code/fzf'
""" call plug#end()

filetype off
syntax on
filetype plugin on

" choose color scheme
colorscheme wombat
set background=dark

"---basic settings
set tabstop=2
set shiftwidth=2
set nowrap
"set textwidth=120
set incsearch
set smartindent
set showcmd
set splitbelow
set nohlsearch
set expandtab
set wildmode=longest,full
set wildmenu
set visualbell t_vb=
set nocp
set backspace=indent,eol,start

" " trim trailing whitespace on any write
autocmd! BufWrite * mark ' | silent! %s/\s\+$// | norm ''
"
" " trim whitespace at end of file on any write
" autocmd BufWrite * mark ' | silent! g/^[\s\l\n]*\%$/d | norm ''

" nnoremap <C-]> <C-a>
" nnoremap <C-[> <C-x>

" toggle comments
nmap ,c gcc
vmap ,c gc

" toggle line numbers
map <C-z> :set invnumber<Enter>

" goto beginning and end of line
map <C-i> I<Esc>
map <C-a> A<Esc>

" jump between sub-views
map <C-h> <C-w>h
map <C-j> <C-w>j
map <C-k> <C-w>k
map <C-l> <C-w>l


" format text to fit into paragraphs
"map <C-f> {gq}

" close buffer
let mapleader = ","
map <leader>ww :q<CR>

" NERDTree setup
map <C-t> :NERDTreeToggle<CR>
map <C-n> :NERDTreeFocus<CR>
" map <C-b> :NERDTree<CR>:BookmarkToRoot<Space>

" Minibuffer setup
map <C-m> :MiniBufExplorer<CR>

let xml_use_xhtml=1
let NERDChristmasTree=1
let g:NERDTreeWinSize=60

" setup specials for file name extensions
augroup syntax
    autocmd!
  au BufNewFile,BufRead *.rhtml     set syn=eruby
  au BufNewFile,BufRead *.rsel      set syn=ruby
  au BufNewFile,BufRead *.rspec     set syn=ruby
  au BufNewFile,BufRead *.erb       set syn=eruby
  au BufNewFile,BufRead *.tex       set syn=tex
  au BufNewFile,BufRead *.scss      set syn=scss.css
  au BufNewFile,BufRead *.sass      set syn=sass.css
  au BufRead,BufNewFile *.scss      set syn=scss.css
  au BufRead,BufNewFile *.sass      set syn=sass.css
  au BufRead,BufNewFile *.template  set syn=cpp
  au BufRead,BufNewFile *.m         set syn=objc
  au BufRead,BufNewFile *.mm        set syn=objc
  au BufRead,BufNewFile *.rdf       set syn=xml
  au BufRead,BufNewFile *.xul       set syn=xml
  au BufRead,BufNewFile *.haml      set syn=haml
  au BufRead,BufNewFile *.json      set syn=json
  au BufRead,BufNewFile *.js        set syn=javascript

augroup end

" vim-json stuff
let g:vim_json_syntax_conceal = 0

augroup formating
    autocmd!
    autocmd BufRead,BufNewFile Makefile*  set noexpandtab
    autocmd BufRead,BufNewFile *.py       set noexpandtab
    autocmd BufRead,BufNewFile *.txt      set nosmartindent

    autocmd BufRead,BufNewFile *.haml     set textwidth=0
    autocmd BufRead,BufNewFile *.py       set textwidth=0
    autocmd BufRead,BufNewFile *.rb       set textwidth=0
    autocmd BufRead,BufNewFile *.rspec    set textwidth=0
    autocmd BufRead,BufNewFile *.m        set textwidth=0
    autocmd BufRead,BufNewFile *.c        set textwidth=0
augroup end

if has ("autocmd")
  filetype plugin indent on
endif

" Read svc.gz files
au BufReadCmd   *.svc.gz           call tar#Browse(expand("<amatch>"))
au BufReadCmd   *.ds.gz            call tar#Browse(expand("<amatch>"))
au BufReadCmd   *.xiv.gz           call tar#Browse(expand("<amatch>"))
au BufReadCmd   *.sonas.gz         call tar#Browse(expand("<amatch>"))
au BufReadCmd   *.unified.gz       call tar#Browse(expand("<amatch>"))
au BufReadCmd   *.vmware.gz        call tar#Browse(expand("<amatch>"))
au BufReadCmd   *.vmax.gz          call tar#Browse(expand("<amatch>"))
au BufReadCmd   *.epic.gz          call tar#Browse(expand("<amatch>"))
au BufReadCmd   *.cisco_network.gz call tar#Browse(expand("<amatch>"))
au BufReadCmd   *.pacman.gz        call tar#Browse(expand("<amatch>"))
au BufReadCmd   *.a9000.gz         call tar#Browse(expand("<amatch>"))
au BufReadCmd   *.vnx.gz           call tar#Browse(expand("<amatch>"))
au BufReadCmd   *.oracle.gz        call tar#Browse(expand("<amatch>"))
au BufReadCmd   *.flash.gz         call tar#Browse(expand("<amatch>"))
au BufReadCmd   *.pure.gz          call tar#Browse(expand("<amatch>"))
au BufReadCmd   *.ds8k.gz          call tar#Browse(expand("<amatch>"))
au BufReadCmd   *.ibmi.Z           call tar#Browse(expand("<amatch>"))
au BufReadCmd   *.hitachi.gz       call tar#Browse(expand("<amatch>"))
au BufReadCmd   *.tsm.gz           call tar#Browse(expand("<amatch>"))
au BufReadCmd   *.nutanix.gz       call tar#Browse(expand("<amatch>"))
au BufReadCmd   *.spectrum_protect.gz call tar#Browse(expand("<amatch>"))


" Fuzzy Finder maps
let mapleader = ","
map <leader>F :FufFile<CR>
map <leader>f :FufTaggedFile<CR>
map <leader>t :FufTag<CR>

" Alignment shortcuts
let mapleader = ","
nmap <leader>a= :Tabularize /=<CR>
vmap <leader>a= :Tabularize /=<CR>
nmap <leader>a> :Tabularize /[=>]><CR>
vmap <leader>a> :Tabularize /[=>]><CR>
nmap <leader>a, :Tabularize /,\zs<CR>
vmap <leader>a, :Tabularize /,\zs<CR>
nmap <leader>a: :Tabularize /:\zs<CR>
vmap <leader>a: :Tabularize /:\zs<CR>
nmap <leader>at :Tabularize /
vmap <leader>at :Tabularize /

" Alignment shortcuts
let mapleader = ","
nmap <leader>. mb
nmap <leader>, mv

" Surround shortcuts
let mapleader = ","
nmap <leader>u ys
nmap <leader>U yss
vmap <leader>u S

" Vim tab shortcuts
let mapleader = "t"
nmap <leader>, :tabp<CR>
nmap <leader>. :tabn<CR>
nmap <leader>t :tabnew<CR>:TName "***"<CR>:tabp<CR>:TName "***"<CR>:tabn<CR>

" Vim sort shortcuts
let mapleader = ","
nmap <leader>s :sort<CR>
nmap <leader>S <S-v>/^$<CR>k:sort<CR>
vmap <leader>s :sort<CR>

" Hmmmm
:nnoremap <Tab> :bnext<CR>
:nnoremap <S-Tab> :bprevious<CR>

" Vim shortcuts for CSS org
let mapleader = ","
nmap <leader>b <S-v>/^$<CR>k:sort<CR> <S-v>/^$<CR>k:Tabularize /:\zs<CR>

" Pathogen
execute pathogen#infect()
call pathogen#helptags() " generate helptags for everything in ‘runtimepath’
syntax on
filetype plugin indent on

" Folding
"set foldmethod=syntax "syntax highlighting items specify folds
"set foldcolumn=1 "defines 1 col at window left, to indicate folding
"let javaScript_fold=1 "activate folding by JS syntax
"set foldlevelstart=99 "start file with all folds opened
